mean(SDF.coef$NTL)
library(plotrix)
mean(SDF.coef$NTL) - 1.96 * std.error(SDF.coef$NTL)
mean(SDF.coef$NTL) + 1.96 * std.error(SDF.coef$NTL)
summary(SDF.coef$NTL)
### NTL
SDF.coef$NTL <- SDF.coef$NTL %>% as.numeric()
summary(SDF.coef$NTL)
mean(SDF.coef$NTL)
min(SDF.coef$NTL)
max(SDF.coef$NTL)
mean(SDF.coef$NTL)
mean(SDF.coef$NTL) - 1.96 * std.error(SDF.coef$NTL)
mean(SDF.coef$NTL) + 1.96 * std.error(SDF.coef$NTL)
### NDVI
SDF.coef$NDVI <- SDF.coef$NDVI %>% as.numeric()
SDF.coef$NDVI %>% hist()
min(SDF.coef$NDVI)
max(SDF.coef$NDVI)
mean(SDF.coef$NDVI)
mean(SDF.coef$NDVI) - 1.96 * std.error(SDF.coef$NDVI)
mean(SDF.coef$NDVI) + 1.96 * std.error(SDF.coef$NDVI)
min(SDF.coef$Temperature)
### Temperature
SDF.coef$Temperature <- SDF.coef$Temperature %>% as.numeric()
min(SDF.coef$Temperature)
max(SDF.coef$Temperature)
mean(SDF.coef$Temperature)
mean(SDF.coef$Temperature) - 1.96 * std.error(SDF.coef$Temperature)
mean(SDF.coef$Temperature) + 1.96 * std.error(SDF.coef$Temperature)
min(SDF.coef$prevalance)
### prevalance
SDF.coef$prevalance <- SDF.coef$prevalance %>% as.numeric()
min(SDF.coef$prevalance)
max(SDF.coef$prevalance)
View(SDF.coef)
mean(SDF.coef$prevalance)
mean(SDF.coef$prevalance) - 1.96 * std.error(SDF.coef$prevalance)
mean(SDF.coef$prevalance) + 1.96 * std.error(SDF.coef$prevalance)
### emergence
SDF.coef$emergence <- SDF.coef$emergence %>% as.numeric()
min(SDF.coef$emergence)
max(SDF.coef$emergence)
mean(SDF.coef$emergence)
mean(SDF.coef$emergence) - 1.96 * std.error(SDF.coef$emergence)
mean(SDF.coef$emergence) + 1.96 * std.error(SDF.coef$emergence)
GWPR.FEM.bandwidth.temp <-
c(169335520, 246166362, 54478341, 106825361, 170485959, 52470546, 98328164, 119094439, # 0.02
68031382, 96273843, 70460731, 76411967, 82523261, 68907767, 79838406, 83369647, # 0.04
78814983, 83069440, 94671040, 92346531, 93639655, 97400574, 96500364, 105328915, # 0.06
103172993, 108376984, 108376984, 116806274, 122287170, 128032493, 128669532, 135547573, # 0.08
133396281, 138741250, 147216220, 143733511, 146815411, 152955409, 151361974, 157777848, # 0.10
154885725, 161805554, 163301140, 164404284, 168440166, 173955825, 175735641, 179891492, # 0.12
184164716, 189121961, 192260140, 195698420, 199618679, 205245167, 207852793, 210596774, # 0.14
215415933, 216794229, 220253753, 223309878, 225327396, 228726201, 228819643, 231412879, # 0.16
235055216, 235682452, 237982507, 240489300, 241485007, 243588578, 242300083, 242384025, # 0.18
241220978, 238628371, 238322413, 235883249, 233084975, 230788726, 231062511 # 0.1975
)
step <- seq(0.0025, 0.1975, 0.0025)
bw.df <- cbind(GWPR.FEM.bandwidth.temp, step) %>% as.data.frame()
##
bw.plot <- ggplot(bw.df, aes(x = step, y = GWPR.FEM.bandwidth.temp)) +
geom_point() +
annotate("segment", xend = 0.016, x = 0.05, yend = 52470546, y = 50000000,
colour = "red", size = 1.5, arrow = arrow()) +
annotate("text", x = 0.06, y = 48000000, label = "Optimal Bandwidth: 0.015") +
scale_x_continuous(name = "Fixed Distance Bandwidth (Arc Degree)") +
scale_y_continuous(name = "Mean Square Prediction Error") +
theme_bw()
jpeg(file="06_Figure/bwselection.jpeg", width = 297, height = 210, units = "mm", quality = 300, res = 300)
bw.plot
dev.off()
# we exiamine from the GWPR based on fem
formula
GWPR.FEM.bandwidth <- # this is about fixed bandwidth
bw.GWPR.step.selection(formula = formula, data = dataset_used.Tokyo, index = c("GridID", "time"),
SDF = points_mesh.in.Tokyo, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "within", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 10, gradientIncrecement = T,
GI.step = 0.0025, GI.upper = 0.2, GI.lower = 0.0025)
# Author: M.L.
# input: 00_datasetUsed.RData
# 00_datasetUsed.RData: "GridID" Grid ID of the mesh grid.
# 00_datasetUsed.RData: "year"
# 00_datasetUsed.RData: "month"
# 00_datasetUsed.RData: "lowSpeedDensity" low-speed transportation how many people*time
#                       movement are recorded
# 00_datasetUsed.RData: "NTL" nighttime light instensity, unit nW⁄(cm^2*sr)
# 00_datasetUsed.RData: "NDVI": greenness (%)
# 00_datasetUsed.RData: "Temperature" monthly average temperature
# 00_datasetUsed.RData: "prevalence" COVID-19 prevalence (infections/1000 capita)
# 00_datasetUsed.RData: "emergence" COVID-19 lockdown ratio
# output: GWPR_FEM_CV_F_result_lowSpeedDensity_0015.Rdata
# GWPR_FEM_CV_F_result_lowSpeedDensity_0015.Rdata: "bw" 0.015
#                                                  "accuracy" 97.50%
# end
library(tidyverse)
library(dplyr)
library(plm)
library(GWPR.light)
library(tmap)
library(sp)
library(doParallel)
library(foreach)
load("04_Data/00_datasetUsed.RData")
load("04_Data/00_points_mesh.in.GT.RData")
source("00_RCode/07_AF_GWPRBandwidthStepSelection_v1.R")
data.in.GT <- points_mesh.in.GT@data %>%
dplyr::select(GridID, PrefID)
dataset_used <- left_join(dataset_used, data.in.GT)
dataset_used <- dataset_used %>% filter(!is.na(PrefID))
rm(data.in.GT)
formula <- lowSpeedDensity ~ NTL + NDVI + Temperature + prevalance + emergence
points_mesh.in.Tokyo <- points_mesh.in.GT@data
points_mesh.in.Tokyo <- points_mesh.in.Tokyo %>%
filter(PrefID == "13")
dataset_used.Tokyo <- left_join(points_mesh.in.Tokyo %>% dplyr::select(GridID),
dataset_used)
cor(dataset_used.Tokyo %>% dplyr::select(all.vars(formula)), use = "complete.obs")
pdata <- pdata.frame(dataset_used.Tokyo , index = c("GridID", "time"))
ols <- plm(formula, pdata, model = "pooling")
summary(ols)
fem <- plm(formula, pdata, model = "within")
summary(fem)
rem <- plm(formula, pdata, model = "random")
summary(rem)
pFtest(fem, ols)
phtest(fem, rem)
plmtest(ols, type = "bp")
rm(fem, ols, pdata, rem)
xy <- points_mesh.in.Tokyo[,c(1,2)]
points_mesh.in.Tokyo <- SpatialPointsDataFrame(coords = xy, data = points_mesh.in.Tokyo,
proj4string = points_mesh.in.GT@proj4string)
GWPR.FEM.bandwidth <- # this is about fixed bandwidth
bw.GWPR.step.selection(formula = formula, data = dataset_used.Tokyo, index = c("GridID", "time"),
SDF = points_mesh.in.Tokyo, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "within", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 5, gradientIncrecement = T,
GI.step = 0.0025, GI.upper = 0.2, GI.lower = 0.0025)
library(tidyverse)
library(dplyr)
library(plm)
library(GWPR.light)
library(tmap)
library(sp)
library(doParallel)
library(foreach)
load("04_Data/00_datasetUsed.RData")
load("04_Data/00_points_mesh.in.GT.RData")
source("00_RCode/07_AF_GWPRBandwidthStepSelection_v1.R")
data.in.GT <- points_mesh.in.GT@data %>%
dplyr::select(GridID, PrefID)
dataset_used <- left_join(dataset_used, data.in.GT)
dataset_used <- dataset_used %>% filter(!is.na(PrefID))
rm(data.in.GT)
formula <- lowSpeedDensity ~ NTL + NDVI + Temperature + prevalance + emergence
points_mesh.in.Tokyo <- points_mesh.in.GT@data
points_mesh.in.Tokyo <- points_mesh.in.Tokyo %>%
filter(PrefID == "13")
dataset_used.Tokyo <- left_join(points_mesh.in.Tokyo %>% dplyr::select(GridID),
dataset_used)
cor(dataset_used.Tokyo %>% dplyr::select(all.vars(formula)), use = "complete.obs")
pdata <- pdata.frame(dataset_used.Tokyo , index = c("GridID", "time"))
ols <- plm(formula, pdata, model = "pooling")
summary(ols)
fem <- plm(formula, pdata, model = "within")
summary(fem)
rem <- plm(formula, pdata, model = "random")
summary(rem)
pFtest(fem, ols)
phtest(fem, rem)
plmtest(ols, type = "bp")
rm(fem, ols, pdata, rem)
?left_join
dataset_to_python <- left_join(dataset_used.Tokyo, points_mesh.in.Tokyo, by = 'GridID')
dataset_to_python <- left_join(dataset_used.Tokyo, points_mesh.in.Tokyo %>% dplyr::select(-PrefID), by = 'GridID')
?saveRDS
saveRDS(dataset_to_python, file = "04_Data/99_dataset_to_python.rds")
dataset_Xshap <- read.csv('03_Results/mergedXSHAP.csv')
formula <- Temperature ~ Temperature_shap
pdata <- pdata.frame(dataset_used.Tokyo , index = c("GridID", "time"))
library(plm)
pdata <- pdata.frame(dataset_used.Tokyo , index = c("GridID", "time"))
pdata <- pdata.frame(dataset_Xshap, index = c("GridID", "time"))
ols <- plm(formula, pdata, model = "pooling")
summary(ols)
fem <- plm(formula, pdata, model = "within")
summary(fem)
rem <- plm(formula, pdata, model = "random")
summary(rem)
pFtest(fem, ols)
phtest(fem, rem)
plmtest(ols, type = "bp")
colnames(dataset_Xshap)
#### build sp dataset
xy <- dataset_Xshap[,c(18,19)]
points_mesh <- SpatialPointsDataFrame(coords = xy, data = dataset_Xshap,
proj4string = CRS(proj))
library(sp)
proj <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
points_mesh <- SpatialPointsDataFrame(coords = xy, data = dataset_Xshap,
proj4string = CRS(proj))
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,2,18,19)]
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,18,19)]
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,18,19)] %>% distinct()
library(tidyverse)
library(dplyr)
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,18,19)] %>% distinct()
xy <- point_dataset[,c(2,3)]
points_mesh <- SpatialPointsDataFrame(coords = xy, data = point_dataset,
proj4string = CRS(proj))
formula <- Temperature ~ Temperature_shap
library(tidyverse)
library(dplyr)
library(GWPR.light)
library(plm)
library(sp)
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "pooling", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 0.0025, GI.upper = 0.2, GI.lower = 0.0025)
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "pooling", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 0.0025, GI.upper = 0.2, GI.lower = 0.0025)
formula <- Temperature_shap ~ Temperature
pdata <- pdata.frame(dataset_Xshap, index = c("GridID", "time"))
ols <- plm(formula, pdata, model = "pooling")
summary(ols)
fem <- plm(formula, pdata, model = "within")
summary(fem)
rem <- plm(formula, pdata, model = "random")
summary(rem)
pFtest(fem, ols)
phtest(fem, rem)
plmtest(ols, type = "bp")
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "pooling", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 0.0025, GI.upper = 0.2, GI.lower = 0.0025)
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "pooling", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 0.0025, GI.upper = 0.1, GI.lower = 0.0025)
View(GWPR.FEM.bandwidth.Temperature)
saveRDS(GWPR.FEM.bandwidth.Temperature, '03_Results/GWPR.FEM.bandwidth.Temperature.rds')
GWPR.FEM.bandwidth.step.list <- GWPR.FEM.bandwidth
plot(GWPR.FEM.bandwidth.step.list[,1], GWPR.FEM.bandwidth.step.list[,2])
plot(GWPR.FEM.bandwidth.Temperature[,1], GWPR.FEM.bandwidth.Temperature[,2])
points_mesh@data <- points_mesh@data %>% dplyr::select(GridID)
GWPR.FEM.CV.F.result <- GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, bw = 0.015, adaptive = F,
p = 2, effect = "individual", kernel = "bisquare", longlat = F,
model = "pooling")
pdata <- pdata.frame(dataset_Xshap , index = c("GridID", "time"))
ols <- plm(formula, pdata, model = "pooling")
summary(ols)
fem <- plm(formula, pdata, model = "within")
summary(fem)
rem <- plm(formula, pdata, model = "random")
summary(rem)
pFtest(fem, ols)
phtest(fem, rem)
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "within", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 0.0025, GI.upper = 0.1, GI.lower = 0.0025)
install.packages("plm", repos = "https://cran.ism.ac.jp/")
install.packages("plm", repos = "https://cran.ism.ac.jp/")
cor(dataset_Xshap)
correlation_table <- cor(dataset_Xshap)
View(correlation_table)
View(correlation_table)
###
formula <- NTL_shap ~ NTL
GWPR.FEM.bandwidth.NTL <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "within", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 0.0025, GI.upper = 0.1, GI.lower = 0.0025)
ols <- plm(formula, pdata, model = "pooling")
summary(ols)
fem <- plm(formula, pdata, model = "within")
summary(fem)
rem <- plm(formula, pdata, model = "random")
summary(rem)
pFtest(fem, ols)
phtest(fem, rem)
plmtest(ols, type = "bp")
View(dataset_Xshap)
test <- dataset_Xshap %>% dplyr::filter(GridID = 5339452613)
test <- dataset_Xshap %>% filter(GridID = 5339452613)
test <- dataset_Xshap %>% filter(GridID == 5339452613)
reg <- lm(formula, test)
summary(reg)
test <- dataset_Xshap %>% filter(GridID == 5339452614)
reg <- lm(formula, test)
summary(reg)
test <- dataset_Xshap %>% filter(GridID == 5339452615)
reg <- lm(formula, test)
test <- dataset_Xshap %>% filter(GridID == 5339452611)
reg <- lm(formula, test)
summary(reg)
formula <- Temperature_shap ~ Temperature
test <- dataset_Xshap %>% filter(GridID == 5339452611)
reg <- lm(formula, test)
summary(reg)
test <- dataset_Xshap %>% filter(GridID == 5339452601)
reg <- lm(formula, test)
test <- dataset_Xshap %>% filter(GridID == 5339452621)
reg <- lm(formula, test)
summary(reg)
test <- dataset_Xshap %>% filter(GridID == 5339452521)
reg <- lm(formula, test)
summary(reg)
dataset_Xshap$Temperature_divide <- dataset_Xshap$Temperature_shap / dataset_Xshap$Temperature
View(dataset_Xshap)
### Temperature
formula <- Temperature_shap ~ Temperature
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = T, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "within", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 1, GI.upper = 10, GI.lower = 1)
library(tidyverse)
library(dplyr)
library(GWPR.light)
library(plm)
library(sp)
proj <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
dataset_Xshap <- read.csv('03_Results/mergedXSHAP.csv')
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,18,19)] %>% distinct()
xy <- point_dataset[,c(2,3)]
points_mesh <- SpatialPointsDataFrame(coords = xy, data = point_dataset,
proj4string = CRS(proj))
library(tidyverse)
library(dplyr)
library(GWPR.light)
library(plm)
library(sp)
proj <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
dataset_Xshap <- read.csv('03_Results/mergedXSHAP.csv')
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,18,19)] %>% distinct()
xy <- point_dataset[,c(2,3)]
points_mesh <- SpatialPointsDataFrame(coords = xy, data = point_dataset,
proj4string = CRS(proj))
dataset_Xshap <- read.csv('03_Results/mergedXSHAP.csv')
### Temperature
formula <- Temperature_shapMean ~ Temperature
correlation_table <- cor(dataset_Xshap)
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,18,19)] %>% distinct()
xy <- point_dataset[,c(2,3)]
points_mesh <- SpatialPointsDataFrame(coords = xy, data = point_dataset,
proj4string = CRS(proj))
points_mesh@data <- points_mesh@data %>% dplyr::select(GridID)
### Temperature
formula <- Temperature_shapMean ~ Temperature
pdata <- pdata.frame(dataset_Xshap , index = c("GridID", "time"))
dataset_Xshap <- read.csv('03_Results/mergedXSHAP.csv')
pdata <- pdata.frame(dataset_Xshap , index = c("GridID", "time"))
ols <- plm(formula, pdata, model = "pooling")
summary(ols)
fem <- plm(formula, pdata, model = "within")
summary(fem)
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,18,19)] %>% distinct()
xy <- point_dataset[,c(2,3)]
points_mesh <- SpatialPointsDataFrame(coords = xy, data = point_dataset,
proj4string = CRS(proj))
points_mesh@data <- points_mesh@data %>% dplyr::select(GridID)
correlation_table <- cor(dataset_Xshap)
proj <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = T, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "within", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 1, GI.upper = 10, GI.lower = 1)
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = T, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "poolin", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 1, GI.upper = 10, GI.lower = 1)
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = T, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "pooling", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 1, GI.upper = 10, GI.lower = 1)
library(tidyverse)
library(dplyr)
library(GWPR.light)
library(plm)
library(sp)
proj <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
dataset_Xshap <- read.csv('03_Results/mergedXSHAP.csv')
### Temperature
formula <- Temperature_shap ~ Temperature
pdata <- pdata.frame(dataset_Xshap , index = c("GridID", "time"))
ols <- plm(formula, pdata, model = "pooling")
summary(ols)
fem <- plm(formula, pdata, model = "within")
summary(fem)
rem <- plm(formula, pdata, model = "random")
summary(rem)
library(tidyverse)
library(dplyr)
library(GWPR.light)
library(plm)
library(sp)
proj <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
dataset_Xshap <- read.csv('03_Results/mergedXSHAP.csv')
library(tidyverse)
library(dplyr)
library(GWPR.light)
library(plm)
library(sp)
proj <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
dataset_Xshap <- read.csv('03_Results/mergedXSHAP.csv')
pdata <- pdata.frame(dataset_Xshap , index = c("GridID", "time"))
ols <- plm(formula, pdata, model = "pooling")
### Temperature
formula <- Temperature_shap ~ Temperature
ols <- plm(formula, pdata, model = "pooling")
summary(ols)
fem <- plm(formula, pdata, model = "within")
summary(fem)
rem <- plm(formula, pdata, model = "random")
summary(rem)
pFtest(fem, ols)
phtest(fem, rem)
plmtest(ols, type = "bp")
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,18,19)] %>% distinct()
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,19,20)] %>% distinct()
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,19,20)] %>% distinct()
xy <- point_dataset[,c(2,3)]
points_mesh <- SpatialPointsDataFrame(coords = xy, data = point_dataset,
proj4string = CRS(proj))
points_mesh@data <- points_mesh@data %>% dplyr::select(GridID)
correlation_table <- cor(dataset_Xshap)
### Temperature
formula <- Temperature_shap ~ Temperature
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "within", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 0.0025, GI.upper = 0.1, GI.lower = 0.0025)
saveRDS(GWPR.FEM.bandwidth.Temperature, '03_Results/GWPR.FEM.bandwidth.Temperature.rds')
plot(GWPR.FEM.bandwidth.Temperature[,1], GWPR.FEM.bandwidth.Temperature[,2])
###
formula <- NTL_shap ~ NTL
GWPR.FEM.bandwidth.NTL <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "within", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 0.0025, GI.upper = 0.1, GI.lower = 0.0025)
library(tidyverse)
library(dplyr)
library(GWPR.light)
library(plm)
library(sp)
proj <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
dataset_Xshap <- read.csv('03_Results/mergedXSHAP.csv')
### Temperature
formula <- Temperature_shap ~ Temperature
pdata <- pdata.frame(dataset_Xshap, index = c("GridID", "time"))
ols <- plm(formula, pdata, model = "pooling")
summary(ols)
fem <- plm(formula, pdata, model = "within")
summary(fem)
rem <- plm(formula, pdata, model = "random")
summary(rem)
#### build sp dataset
point_dataset <- dataset_Xshap[,c(1,19,20)] %>% distinct()
xy <- point_dataset[,c(2,3)]
points_mesh <- SpatialPointsDataFrame(coords = xy, data = point_dataset,
proj4string = CRS(proj))
points_mesh@data <- points_mesh@data %>% dplyr::select(GridID)
correlation_table <- cor(dataset_Xshap)
### Temperature
formula <- Temperature_shap ~ Temperature
GWPR.FEM.bandwidth.Temperature <- # this is about fixed bandwidth
bw.GWPR(formula = formula, data = dataset_Xshap, index = c("GridID", "time"),
SDF = points_mesh, adaptive = F, p = 2, bigdata = F,
upperratio = 0.10, effect = "individual", model = "within", approach = "CV",
kernel = "bisquare",doParallel = T, cluster.number = 8, gradientIncrement = T,
GI.step = 0.0025, GI.upper = 0.1, GI.lower = 0.0025)
